from machine import Pin, PWM, UART, I2C
import time
 
MODE = "TX"  #a changer en "RX" sur le deuxième Pico
 
# Configuration UART (TX sur GP8, RX sur GP9)
uart = UART(1, baudrate=9600, tx=Pin(8), rx=Pin(9))
 
# Configuration du PWM sur GP14
pwm = PWM(Pin(14))
pwm.freq(1000)

# I2C pour ADS1015 (H8)
i2c = I2C(1, scl=Pin(15), sda=Pin(14), freq=400000)
ADS1015_ADDR = 0x48

# Cette section lit la tension analogique du connecteur H8 à l’aide du convertisseur ADS1015,
# puis la convertit en un pourcentage de rapport cyclique (duty cycle) correspondant.

def read_h8_voltage():
    """Lit la tension sur le canal AIN2 de l'ADS1015 (entrée H8)."""
    config = 0xE283  # AIN2, ±4.096V, single-shot
    i2c.writeto_mem(ADS1015_ADDR, 0x01, config.to_bytes(2, 'big'))
    time.sleep_ms(10)


    data = i2c.readfrom_mem(ADS1015_ADDR, 0x00, 2)
    raw = int.from_bytes(data, 'big') >> 4
    if raw > 2047:
        raw -= 4096


    voltage = raw * 4.096 / 2048
    return max(0, voltage)


def voltage_to_duty(voltage):
    """Convertit une tension (0–3.3V) en duty cycle (%)"""
    return min(max((voltage / 3.3) * 100, 0), 100)

# Mode EMETTEUR(TX)
if MODE == "TX":
    print(" MODE EMETTEUR (TX) ")
    while True:
        # Génère un duty cycle variant entre 0 et 100 %
        for duty_percent in range(0, 101, 10):
            duty_u16 = int((duty_percent / 100) * 65535)
            pwm.duty_u16(duty_u16)

            # Envoi du duty cycle via UART (texte ASCII)
            uart.write(f"{duty_percent}\n")
            print(f"Valeur envoyee : {duty_percent:.1f}%")

            # Lecture de la tension sur H8 pour calculer le duty réel
            voltage = read_h8_voltage()
            measured_duty = voltage_to_duty(voltage)
            error = measured_duty - duty_percent
            print(f"Tension H8: {voltage:.2f} V | Duty mesurer: {measured_duty:.1f}% | Erreur: {error:.1f}%")

            time.sleep(1)

# MODE RECEPTEUR (RX)
elif MODE == "RX":
    print(" MODE RECEPTEUR (RX) ")
    while True:
        # Lecture tension filtrée via H8 (ADS1015)
        voltage = read_h8_voltage()
        measured_duty = voltage_to_duty(voltage)


        # Lecture du duty envoyé par UART
        if uart.any():
            line = uart.readline()
            if line:
                try:
                    # Conversion sécurisée compatible MicroPython
                    sent_duty = float(line.decode('utf-8').strip()) # type: ignore
                    error = measured_duty - sent_duty
                    print(f"Tension H8: {voltage:.2f} V | Duty mesure: {measured_duty:.1f}% | "
                          f"Duty recu: {sent_duty:.1f}% | Erreur: {error:.1f}%")
                except (ValueError, AttributeError):
                    # Ignore les lignes mal formées ou types inattendus
                    continue


        time.sleep(0.5)
